#!/usr/bin/env groovy
import groovy.json.JsonOutput

node("master") {

	// =========   USER DEFINED VARS ===========
	def jenkinsUser    = "jenkins-service-account";
	def REPO           = "033-device-microservice.git"
	def moduleGitUrl01 = "https://${jenkinsUser}@fleet.alm.accenture.com/avsbitbucket/scm/avs-m3/${REPO}"
	// =========================================

	try {

		def projectVersion
		def incremental
		def projectEnv
		def gitBranchPath
		def ReleaseNumber
		def newIncremental
	
		stage('Checkout') {
			deleteDir()
			
			gitBranchPath = "${AVS_GIT_BRANCH}".split('/')

			echo "Checkout in progress..."
			// DEVICE Manager
			checkout([$class: 'GitSCM', branches: [[name: '${AVS_GIT_BRANCH}']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'device-ms']], submoduleCfg: [], userRemoteConfigs: [[url: moduleGitUrl01, credentialsId:'db9a3043-47f7-4274-aa62-7c3cd3b508e9']]])
			// COMMONS SCRIPT
			checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'commons-scripts']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://jenkins-service-account@fleet.alm.accenture.com/avsbitbucket/scm/avs-m3/99-commons-scripts.git', credentialsId:'db9a3043-47f7-4274-aa62-7c3cd3b508e9']]])
		}

		stage('Build') {
			echo "Build in progress..."
			def mvnHome = tool 'maven333'
			
			if (RELEASE.toString().toBoolean()) {
				echo "Builnding a new RELEASE..."
				def projectJson = readJSON file: './device-ms/project.json'
				projectVersion = "${projectJson.version}"

				sh "touch /home/jenkins/${env.JOB_NAME}.json"
				sh "cat /home/jenkins/${env.JOB_NAME}.json > ${env.JOB_NAME}.json"
				
				try {
					projectEnv = readJSON file: "${env.JOB_NAME}.json"
				} catch (JSONException) {
					projectEnv = readJSON text: /{"${projectVersion}":"000"}/
				}

				if (!projectEnv[projectVersion]) {
					projectEnv[projectVersion] = "000"
				}
				incremental = projectEnv[projectVersion]
				newIncremental = incremental as Integer
				newIncremental++
				if (newIncremental < 10) {
					incremental = "00" + newIncremental;
				} else if (newIncremental < 100) {
					incremental = "0" + newIncremental;
				} else {
					incremental = newIncremental as String;
				}
				ReleaseNumber = "${projectVersion}-${incremental}"

			} else {
				echo "Builnding a new SNAPSHOT..."
				ReleaseNumber = "SNAPSHOT"
			}
			
			def size = gitBranchPath.length
			branch = "${gitBranchPath[size-1]}"
			ReleaseNumber = "${ReleaseNumber}-${branch}"
			currentBuild.description = "${ReleaseNumber} - ${Comment}"
			
			// Build device Manager
			sh "'${mvnHome}/bin/mvn' -f ./device-ms/pom.xml -B versions:set -DgenerateBackupPoms=false -DnewVersion=${ReleaseNumber}"
			sh "'${mvnHome}/bin/mvn' -f ./device-ms/pom.xml -P ${MAVEN_ADDITIONAL_PARAM} -Dmaven.test.failure.ignore -DCOMMONS_LIB_VERSION=${COMMONS_LIB_VERSION} clean compile package"
		}

		stage('Package') {
			if (ReleaseNumber.contains("SNAPSHOT")) {
				echo "No packaging for SNAPSHOT"
				currentBuild.result = "SUCCESS"
			} else {
				withEnv(["AVS_RELEASE_NUMBER=${ReleaseNumber}"]) {
					echo "Packaging DIST ..."
					sh "rm -rf commons-scripts/dist"
					sh "rm -rf commons-scripts/conf"
					sh "rm -rf commons-scripts/lib"
					
					sh "mkdir -p commons-scripts/dist"
					sh "mkdir -p commons-scripts/conf"
					sh "mkdir -p commons-scripts/lib"
					
					echo "Packaging DIST ..."
					sh "cp device-ms/target/*.war commons-scripts/dist/"
					echo "Packaging CONF ..."
					sh "cp -R device-ms/target/conf/* commons-scripts/conf/"
					echo "Packaging LIB ..."
					sh "cp -rf device-ms/target/lib/* commons-scripts/lib/"
					
					sh "chmod +x commons-scripts/build/build-ng.sh"
					sh "chmod +x commons-scripts/scripts/build.sh"
					
					sh "commons-scripts/build/build-ng.sh"
				}
			}
		}

		stage('Archive') {
			if (ReleaseNumber.contains("SNAPSHOT")) {
				echo "No packaging for SNAPSHOT"
				currentBuild.result = "SUCCESS"
			} else {
				archiveArtifacts artifacts: 'commons-scripts/temp/*.zip'
			}
		}
		
		stage('Store on Nexus') {
			if (ReleaseNumber.contains("SNAPSHOT")) {
				echo "SNAPSHOT dont upload to NEXUS"
				currentBuild.result = "SUCCESS"
			} else {
				echo "Storing on Nexus in progress..."
				artifactFilepath = "commons-scripts/temp/${JOB_NAME}_REL_${ReleaseNumber}.zip"
				def pom = readMavenPom file: 'device-ms/pom.xml'

				echo "finalName  = ${pom.build.finalName}"
				echo "groupId    = ${pom.groupId}"
				echo "artifactId = ${pom.artifactId}"
				echo "version    = ${pom.version}"
				nexusPublisher nexusInstanceId: 'avsnexus', nexusRepositoryId: 'AVS_Product_M3_Artifacts', packages: [[$class: 'MavenPackage', mavenAssetList: [[classifier: '', extension: '', filePath: artifactFilepath]], mavenCoordinate: [artifactId: pom.artifactId, groupId: pom.groupId, packaging: 'zip', version: pom.version]]]
			}
		}
		
		stage('Finalize') {
			if (ReleaseNumber.contains("SNAPSHOT")) {
				currentBuild.result = "SUCCESS"
			} else {
				def pom = readMavenPom file: 'device-ms/pom.xml'
				repository = "AVS_Product_M3_Artifacts"
				version = "${pom.version}"

				// Nexus REST API Get
				urlToDownload = "https://avsdeveng.accenture.com/nexus/service/local/artifact/maven/redirect?r=${repository}&g=${pom.groupId}&a=${pom.artifactId}&p=zip&v=${version}";

				currentBuild.description = "${ReleaseNumber} - ${Comment} - <a href=\"${urlToDownload}\">[Download]</a>"
			}
		}
	
		stage('Update Project version') {
			if (ReleaseNumber.contains("SNAPSHOT")) {
				currentBuild.result = "SUCCESS"
			} else {

				echo "Raising minor revision..."
				projectEnv[projectVersion] = newIncremental
				def projectEnvSerialized = JsonOutput.toJson(projectEnv)
				sh "echo ${projectEnvSerialized} > /home/jenkins/${env.JOB_NAME}.json"
			}
		}
	
	} catch (Error) {
		currentBuild.result = "FAILURE"
		println Error
	}
}